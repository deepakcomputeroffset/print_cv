generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model customer {
    id                 Int     @id @default(autoincrement())
    name               String
    businessName       String
    isBanned           Boolean @default(false)
    email              String
    phone              String  @unique
    password           String
    wallet             wallet?
    gstNumber          String?
    isVerifed          Boolean @default(false)
    customerCategoryId Int

    orders order[]

    referenceId Int?
    references  customer[] @relation("reference")
    referedBy   customer?  @relation("reference", fields: [referenceId], references: [id], onDelete: Restrict)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    customerCategory customerCategory @relation(fields: [customerCategoryId], references: [id], onDelete: Restrict)
}

model address {
    id        Int              @id @default(autoincrement())
    line      String
    pinCode   String
    cityId    Int
    ownerId   Int
    ownerType AddressOwnerType @default(CUSTOMER)

    city city @relation(fields: [cityId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([ownerId, ownerType]) // for efficient lookup
}

model country {
    id     Int     @id @default(autoincrement())
    name   String
    states state[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model state {
    id        Int    @id @default(autoincrement())
    countryId Int
    name      String
    cities    city[]

    country   country  @relation(fields: [countryId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model city {
    id        Int       @id @default(autoincrement())
    stateId   Int
    name      String
    addresses address[]

    state     state          @relation(fields: [stateId], references: [id])
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
    discount  cityDiscount[]
}

model customerCategory {
    id        Int            @id @default(autoincrement())
    name      String         @unique
    discount  Float
    level     Int            @unique
    customers customer[]
    city      cityDiscount[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model cityDiscount {
    id                 Int   @id @default(autoincrement())
    cityId             Int
    customerCategoryId Int
    discount           Float // Specific to city + category

    city             city             @relation(fields: [cityId], references: [id])
    customerCategory customerCategory @relation(fields: [customerCategoryId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([cityId, customerCategoryId]) // Prevent duplicates
}

model wallet {
    id           Int           @id @default(autoincrement())
    customerId   Int           @unique
    balance      Float         @default(0)
    transactions transaction[]
    customer     customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
}

model transaction {
    id          Int              @id @default(autoincrement())
    walletId    Int
    amount      Float
    type        TRANSACTION_TYPE
    description String
    createBy    Int
    wallet      wallet           @relation(fields: [walletId], references: [id], onDelete: Restrict)
    staff       staff            @relation(fields: [createBy], references: [id])
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt
}

model productCategory {
    id          Int     @id @default(autoincrement())
    name        String
    description String?
    imageUrl    String
    isAvailable Boolean @default(false)

    products              product[]
    productAttributeTypes productAttributeType[]

    parentCategoryId Int? // For subcategories parent category id
    subCategories    productCategory[] @relation("SubCategories")
    parentCategory   productCategory?  @relation("SubCategories", fields: [parentCategoryId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model product {
    id              Int           @id @default(autoincrement())
    name            String
    description     String
    imageUrl        String[]
    categoryId      Int
    isAvailable     Boolean       @default(false)
    sku             String        @unique
    isTieredPricing Boolean       @default(false)
    productItems    productItem[]

    category  productCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    createdAt DateTime        @default(now())
    updatedAt DateTime        @updatedAt
}

model productItem {
    id                      Int                     @id @default(autoincrement())
    productId               Int
    sku                     String                  @unique
    pricing                 pricing[]
    isAvailable             Boolean                 @default(false)
    productAttributeOptions productAttributeValue[]
    orders                  order[]
    uploadGroupId           Int

    uploadGroup uploadGroup @relation(fields: [uploadGroupId], references: [id], onDelete: Restrict)
    product     product     @relation(fields: [productId], references: [id], onDelete: Cascade)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

model pricing {
    id            Int @id @default(autoincrement())
    productItemId Int
    qty           Int
    price         Int

    productItem productItem @relation(fields: [productItemId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([productItemId, qty])
}

model productAttributeValue {
    id                     Int           @id @default(autoincrement())
    productItems           productItem[]
    productAttributeTypeId Int
    productAttributeValue  String

    productAttributeType productAttributeType @relation(fields: [productAttributeTypeId], references: [id], onDelete: Restrict)
    createdAt            DateTime             @default(now())
    updatedAt            DateTime             @updatedAt

    // Composite unique constraint
    @@unique([productAttributeTypeId, productAttributeValue])
}

model productAttributeType {
    id                      Int                     @id @default(autoincrement())
    name                    String
    productAttributeOptions productAttributeValue[]

    productCategoryId Int
    productCategory   productCategory @relation(fields: [productCategoryId], references: [id], onDelete: Restrict)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model order {
    id             Int            @id @default(autoincrement())
    customerId     Int
    productItemId  Int
    qty            Int
    igst           Float
    uploadCharge   Float
    price          Float
    total          Float
    status         STATUS         @default(PLACED)
    uploadFilesVia UPLOADVIA
    jobId          Int?
    attachment     attachment[]
    comments       orderComment[]
    deliveryVia    DELIVERYVIA    @default(NONE)
    distribution   distribution?

    job         job?        @relation(fields: [jobId], references: [id], onDelete: SetNull)
    productItem productItem @relation(fields: [productItemId], references: [id], onDelete: Restrict)
    customer    customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

model orderComment {
    id          Int          @id @default(autoincrement())
    orderId     Int
    comment     String
    commentType COMMENT_TYPE
    staffId     Int?

    order     order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    staff     staff?   @relation(fields: [staffId], references: [id], onDelete: SetNull)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model attachment {
    id           Int         @id @default(autoincrement())
    orderId      Int
    type         UPLOAD_TYPE
    url          String
    uploadedById Int?
    uploadedBy   staff?      @relation(fields: [uploadedById], references: [id], onDelete: SetNull)
    order        order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
}

model staff {
    id            Int            @id @default(autoincrement())
    name          String
    email         String
    phone         String         @unique
    role          ROLE           @default(STAFF)
    isBanned      Boolean        @default(false)
    password      String
    assignedTasks task[]
    jobVerified   job[]
    transactions  transaction[]
    attachments   attachment[]
    orderComment  orderComment[]
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    distributions distribution[]
}

model distribution {
    id            Int       @id @default(autoincrement())
    orderId       Int       @unique
    distributorId Int
    completed     Boolean   @default(false)
    completedTime DateTime?
    order         order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
    distributor   staff     @relation(fields: [distributorId], references: [id], onDelete: Restrict)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model job {
    id          Int       @id @default(autoincrement())
    name        String    @unique
    orders      order[]
    isVerified  Boolean   @default(false)
    isCompleted Boolean   @default(false)
    verifiedBy  Int?
    staff       staff?    @relation(fields: [verifiedBy], references: [id], onDelete: Restrict)
    tasks       task[]
    verifiedAt  DateTime?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@index([name])
    @@index([id])
}

model task {
    id              Int         @id @default(autoincrement())
    jobId           Int
    taskTypeId      Int
    assignedStaffId Int?
    status          TASK_STATUS @default(PENDING)

    startedAt   DateTime?
    completedAt DateTime?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    assignee         staff?   @relation(fields: [assignedStaffId], references: [id], onDelete: Restrict)
    taskType         taskType @relation(fields: [taskTypeId], references: [id], onDelete: Restrict)
    job              job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
    designCategoryId Int?
}

model taskType {
    id          Int    @id @default(autoincrement())
    name        String @unique
    description String
    tasks       task[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model designCategory {
    id      Int      @id @default(autoincrement())
    name    String   @unique
    img     String
    designs design[]
}

model design {
    id               Int             @id @default(autoincrement())
    designCategoryId Int?
    name             String          @unique
    img              String
    downloadUrl      String
    designCategory   designCategory? @relation(fields: [designCategoryId], references: [id])
}

model uploadGroup {
    id           Int           @id @default(autoincrement())
    name         String        @unique
    uploadTypes  UPLOAD_TYPE[]
    productItems productItem[]
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
}

enum UPLOAD_TYPE {
    FRONT_SIDE
    BACK_SIDE
    FRONT_UV
    BACK_UV
}

enum DELIVERYVIA {
    NONE
    DISTRIBUTOR
    DIRECT
}

enum AddressOwnerType {
    CUSTOMER
    STAFF
}

enum UPLOADVIA {
    EMAIL
    UPLOAD
}

enum TASK_STATUS {
    PENDING
    IN_PROGRESS
    COMPLETED
}

enum ROLE {
    ADMIN
    PRODUCT_MANAGER
    ORDER_MANAGER
    JOB_MANAGER
    DISPATCHER
    ACCOUNTANT
    DISTRIBUTER
    STAFF
}

enum TRANSACTION_TYPE {
    DEBIT
    CREDIT
}

enum STATUS {
    PLACED
    FILE_UPLOADED
    PROCESSING
    PROCESSED
    DISPATCHED
    CANCELLED
    IMPROPER_ORDER
}

enum COMMENT_TYPE {
    CANCELLATION
    IMPROPER_ORDER
    GENERAL
    CUSTOMER_QUERY
    STAFF_NOTE
}
